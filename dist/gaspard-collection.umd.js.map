{"version":3,"sources":["webpack://gaspard-collection/webpack/universalModuleDefinition","webpack://gaspard-collection/webpack/bootstrap","webpack://gaspard-collection/external \"gaspard\"","webpack://gaspard-collection/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","GaspardCollection","elements","arguments","length","undefined","_classCallCheck","this","contextElements","Array","isArray","gaspard__WEBPACK_IMPORTED_MODULE_0__","concat","method","_len","params","_key","forEach","element","classNames","each","state","attribute","ruleName","htmlString","textString","duration","eventName","eventHandler","data","selectorOrElement","Element","map","filter","reduce","accumulator","indexOf","push"],"mappings":"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","file":"gaspard-collection.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"gaspard\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gaspard-collection\", [\"gaspard\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gaspard-collection\"] = factory(require(\"gaspard\"));\n\telse\n\t\troot[\"gaspard-collection\"] = factory(root[\"gaspard\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/***\n * GaspardCollection Module\n * @module GaspardCollection\n */\n\nimport {\n  addClass, removeClass, toggleClass, attr, css,\n  before, after, prepend, append, remove, text, html, replaceWith,\n  fadeIn, fadeOut, hide, show,\n  on, off, trigger,\n  find\n} from 'gaspard'\n\n/**\n * Use GaspardCollection class to perform actions on Elements\n * @example\n * import GaspardCollection from 'gaspard-collection'\n * const collection = new GaspardCollection('div.highlight')\n * collection\n *   .css('background-color', 'green')\n *   .find('p:first-child') // returns a new gaspard collection\n *   .addClass('introduction')\n *   .fadeIn(400)\n *   .elements // Array of matched elements\n *   .forEach(element => {\n *     console.log('div.highlight first paragraph', element)\n *   })\n *\n * @param {(Element[]|Element|string)} [elements=[]] DOM Elements, Element, or string to query the DOM\n * @return {GaspardCollection} GaspardCollection containing elements\n */\nexport default class GaspardCollection {\n  constructor (elements = []) {\n    let contextElements\n    if (Array.isArray(elements)) {\n      contextElements = elements\n    } else if (typeof elements === 'string') {\n      contextElements = find(elements)\n    } else {\n      contextElements = [elements]\n    }\n    this.elements = [].concat(contextElements)\n  }\n  /**\n   * Apply a method on each elements and returns the collection to chain methods\n   * @param {Function} method Accept a method to run on each elements\n   * @param {any} params A list of argument to call the method with\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  each (method, ...params) {\n    this.elements.forEach(element => method(element, ...params))\n    return this\n  }\n  /**\n   * Add classes to each elements\n   * @see {@link attributes/addClass}\n   * @param {string} classNames\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  addClass (classNames) {\n    return this.each(addClass, classNames)\n  }\n  /**\n   * Toggle classes to each elements\n   * @see {@link attributes/toggleClass}\n   * @param {string} classNames\n   * @param {boolean} state\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  toggleClass (classNames, state) {\n    return this.each(toggleClass, classNames, state)\n  }\n  /**\n   * Remove classes to each elements\n   * @see {@link attributes/removeClass}\n   * @param {string} classNames\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  removeClass (classNames) {\n    return this.each(removeClass, classNames)\n  }\n  /**\n   * Set attribute to each elements\n   * @see {@link attributes/attr}\n   * @param {string} attribute\n   * @param {any} value\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  attr (attribute, value) {\n    return this.each(attr, attribute, value)\n  }\n  /**\n   * Set CSS value to each elements\n   * @see {@link attributes/css}\n   * @param {string} ruleName\n   * @param {string} value\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  css (ruleName, value) {\n    return this.each(css, ruleName, value)\n  }\n  /**\n   * Insert content before each elements\n   * @see {@link content/before}\n   * @param {string} htmlString\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  before (htmlString) {\n    return this.each(before, htmlString)\n  }\n  /**\n   * Insert content after each elements\n   * @see {@link content/after}\n   * @param {string} htmlString\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  after (htmlString) {\n    return this.each(after, htmlString)\n  }\n  /**\n   * Prepend element to each elements\n   * @see {@link content/prepend}\n   * @param {Element} element\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  prepend (element) {\n    return this.each(prepend, element)\n  }\n  /**\n   * Append element to each elements\n   * @see {@link content/append}\n   * @param {Element} element\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  append (element) {\n    return this.each(append, element)\n  }\n  /**\n   * Remove each elements\n   * @see {@link content/remove}\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  remove () {\n    return this.each(remove)\n  }\n  /**\n   * Set text to each elements\n   * @see {@link content/text}\n   * @param {string} textString\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  text (textString) {\n    return this.each(text, textString)\n  }\n  /**\n   * Set html to each elements\n   * @see {@link content/html}\n   * @param {string} htmlString\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  html (htmlString) {\n    return this.each(html, htmlString)\n  }\n  /**\n   * Replace each elements\n   * @see {@link content/replaceWith}\n   * @param {string} htmlString\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  replaceWith (htmlString) {\n    return this.each(replaceWith, htmlString)\n  }\n  /**\n   * Fade in each elements\n   * @see {@link effects/fadeIn}\n   * @param {number} duration\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  fadeIn (duration) {\n    return this.each(fadeIn, duration)\n  }\n  /**\n   * Fade out each elements\n   * @see {@link effects/fadeOut}\n   * @param {number} duration\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  fadeOut (duration) {\n    return this.each(fadeOut, duration)\n  }\n  /**\n   * Hide each elements\n   * @see {@link effects/hide}\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  hide () {\n    return this.each(hide)\n  }\n  /**\n   * Show each elements\n   * @see {@link effects/show}\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  show () {\n    return this.each(show)\n  }\n  /**\n   * Attach an event handler function for each elements\n   * @see {@link events/on}\n   * @param {string} eventName\n   * @param {Function} eventHandler\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  on (eventName, eventHandler) {\n    return this.each(on, eventName, eventHandler)\n  }\n  /**\n   * Remove an event handler function for each elements\n   * @see {@link events/off}\n   * @param {string} eventName\n   * @param {Function} eventHandler\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  off (eventName, eventHandler) {\n    return this.each(off, eventName, eventHandler)\n  }\n  /**\n   * Execute all handlers to each elements\n   * @see {@link events/trigger}\n   * @param {string} eventName\n   * @param {Object} data\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  trigger (eventName, data) {\n    return this.each(trigger, eventName, data)\n  }\n  /**\n   * Returns a collection of matched elements either found in the DOM based on passed argument\n   * @see {@link selectors/find}\n   * @param {(string|Element)} selectorOrElement Accepts a string containing a CSS selector which is then used to match a set of elements, or an Element\n   * @return {GaspardCollection} GaspardCollection containing elements\n   */\n  find (selectorOrElement) {\n    if (selectorOrElement instanceof Element === true) {\n      return new GaspardCollection(selectorOrElement)\n    } else {\n      return this.elements\n        .map(element => find(selectorOrElement, element))\n        .filter(element => element.length || element instanceof Element === true)\n        .reduce((accumulator, element) => accumulator.concat(element), [])\n        .reduce((accumulator, element) => {\n          if (~accumulator.elements.indexOf(element)) {\n            return accumulator\n          } else {\n            accumulator.elements.push(element)\n            return accumulator\n          }\n        }, new GaspardCollection())\n    }\n  }\n}\n"],"sourceRoot":""}